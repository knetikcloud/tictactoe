/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.PropertyFieldResource;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class PropertyFieldResource {
  
  @SerializedName("description")
  private String description = null;
  public enum InnerTypeEnum {
     integer,  number,  bool,  string,  enumeration,  list,  object, 
  };
  @SerializedName("inner_type")
  private InnerTypeEnum innerType = null;
  @SerializedName("inner_type_fields")
  private List<PropertyFieldResource> innerTypeFields = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("required")
  private Boolean required = null;
  public enum TypeEnum {
     integer,  number,  bool,  string,  enumeration,  list,  object, 
  };
  @SerializedName("type")
  private TypeEnum type = null;
  @SerializedName("valid_values")
  private List<String> validValues = null;

  /**
   * A description of the field
   **/
  @ApiModelProperty(value = "A description of the field")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * The type of values within a 'list' type field
   **/
  @ApiModelProperty(value = "The type of values within a 'list' type field")
  public InnerTypeEnum getInnerType() {
    return innerType;
  }
  public void setInnerType(InnerTypeEnum innerType) {
    this.innerType = innerType;
  }

  /**
   * A description of fields within objects within a 'list' type field, when inner_type is 'object'
   **/
  @ApiModelProperty(value = "A description of fields within objects within a 'list' type field, when inner_type is 'object'")
  public List<PropertyFieldResource> getInnerTypeFields() {
    return innerTypeFields;
  }
  public void setInnerTypeFields(List<PropertyFieldResource> innerTypeFields) {
    this.innerTypeFields = innerTypeFields;
  }

  /**
   * The name of the field
   **/
  @ApiModelProperty(value = "The name of the field")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Whether the field is required
   **/
  @ApiModelProperty(value = "Whether the field is required")
  public Boolean getRequired() {
    return required;
  }
  public void setRequired(Boolean required) {
    this.required = required;
  }

  /**
   * The type of the field
   **/
  @ApiModelProperty(value = "The type of the field")
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }

  /**
   * A list of valid values for 'enum' type fields
   **/
  @ApiModelProperty(value = "A list of valid values for 'enum' type fields")
  public List<String> getValidValues() {
    return validValues;
  }
  public void setValidValues(List<String> validValues) {
    this.validValues = validValues;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyFieldResource propertyFieldResource = (PropertyFieldResource) o;
    return (this.description == null ? propertyFieldResource.description == null : this.description.equals(propertyFieldResource.description)) &&
        (this.innerType == null ? propertyFieldResource.innerType == null : this.innerType.equals(propertyFieldResource.innerType)) &&
        (this.innerTypeFields == null ? propertyFieldResource.innerTypeFields == null : this.innerTypeFields.equals(propertyFieldResource.innerTypeFields)) &&
        (this.name == null ? propertyFieldResource.name == null : this.name.equals(propertyFieldResource.name)) &&
        (this.required == null ? propertyFieldResource.required == null : this.required.equals(propertyFieldResource.required)) &&
        (this.type == null ? propertyFieldResource.type == null : this.type.equals(propertyFieldResource.type)) &&
        (this.validValues == null ? propertyFieldResource.validValues == null : this.validValues.equals(propertyFieldResource.validValues));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.innerType == null ? 0: this.innerType.hashCode());
    result = 31 * result + (this.innerTypeFields == null ? 0: this.innerTypeFields.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.required == null ? 0: this.required.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.validValues == null ? 0: this.validValues.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyFieldResource {\n");
    
    sb.append("  description: ").append(description).append("\n");
    sb.append("  innerType: ").append(innerType).append("\n");
    sb.append("  innerTypeFields: ").append(innerTypeFields).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  required: ").append(required).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  validValues: ").append(validValues).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
