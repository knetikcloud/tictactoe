/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class CartSummary {
  
  @SerializedName("created_date")
  private Long createdDate = null;
  @SerializedName("currency_code")
  private String currencyCode = null;
  @SerializedName("grand_total")
  private Double grandTotal = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("invoice_id")
  private Double invoiceId = null;
  @SerializedName("items_in_cart")
  private Integer itemsInCart = null;
  public enum StatusEnum {
     active,  processing,  closed,  onhold, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("subtotal")
  private Double subtotal = null;

  /**
   * The date/time this resource was created in seconds since unix epoch
   **/
  @ApiModelProperty(value = "The date/time this resource was created in seconds since unix epoch")
  public Long getCreatedDate() {
    return createdDate;
  }
  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }

  /**
   * The unique id code for the currency used in the cart
   **/
  @ApiModelProperty(value = "The unique id code for the currency used in the cart")
  public String getCurrencyCode() {
    return currencyCode;
  }
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  /**
   * The grand total for the cart
   **/
  @ApiModelProperty(value = "The grand total for the cart")
  public Double getGrandTotal() {
    return grandTotal;
  }
  public void setGrandTotal(Double grandTotal) {
    this.grandTotal = grandTotal;
  }

  /**
   * The unique ID for the cart
   **/
  @ApiModelProperty(value = "The unique ID for the cart")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * The ID of the invoice associated with this cart
   **/
  @ApiModelProperty(value = "The ID of the invoice associated with this cart")
  public Double getInvoiceId() {
    return invoiceId;
  }
  public void setInvoiceId(Double invoiceId) {
    this.invoiceId = invoiceId;
  }

  /**
   * The number of items in the cart
   **/
  @ApiModelProperty(value = "The number of items in the cart")
  public Integer getItemsInCart() {
    return itemsInCart;
  }
  public void setItemsInCart(Integer itemsInCart) {
    this.itemsInCart = itemsInCart;
  }

  /**
   * The status of the cart
   **/
  @ApiModelProperty(value = "The status of the cart")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   * The subtotal of all items in the cart
   **/
  @ApiModelProperty(value = "The subtotal of all items in the cart")
  public Double getSubtotal() {
    return subtotal;
  }
  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSummary cartSummary = (CartSummary) o;
    return (this.createdDate == null ? cartSummary.createdDate == null : this.createdDate.equals(cartSummary.createdDate)) &&
        (this.currencyCode == null ? cartSummary.currencyCode == null : this.currencyCode.equals(cartSummary.currencyCode)) &&
        (this.grandTotal == null ? cartSummary.grandTotal == null : this.grandTotal.equals(cartSummary.grandTotal)) &&
        (this.id == null ? cartSummary.id == null : this.id.equals(cartSummary.id)) &&
        (this.invoiceId == null ? cartSummary.invoiceId == null : this.invoiceId.equals(cartSummary.invoiceId)) &&
        (this.itemsInCart == null ? cartSummary.itemsInCart == null : this.itemsInCart.equals(cartSummary.itemsInCart)) &&
        (this.status == null ? cartSummary.status == null : this.status.equals(cartSummary.status)) &&
        (this.subtotal == null ? cartSummary.subtotal == null : this.subtotal.equals(cartSummary.subtotal));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.createdDate == null ? 0: this.createdDate.hashCode());
    result = 31 * result + (this.currencyCode == null ? 0: this.currencyCode.hashCode());
    result = 31 * result + (this.grandTotal == null ? 0: this.grandTotal.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.invoiceId == null ? 0: this.invoiceId.hashCode());
    result = 31 * result + (this.itemsInCart == null ? 0: this.itemsInCart.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.subtotal == null ? 0: this.subtotal.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSummary {\n");
    
    sb.append("  createdDate: ").append(createdDate).append("\n");
    sb.append("  currencyCode: ").append(currencyCode).append("\n");
    sb.append("  grandTotal: ").append(grandTotal).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  invoiceId: ").append(invoiceId).append("\n");
    sb.append("  itemsInCart: ").append(itemsInCart).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  subtotal: ").append(subtotal).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
