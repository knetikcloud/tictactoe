/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.Behavior;
import com.knetikcloud.model.Property;
import com.knetikcloud.model.Sku;
import java.util.*;
import java.util.Map;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class CouponItem {
  
  @SerializedName("additional_properties")
  private Map<String, Property> additionalProperties = null;
  @SerializedName("behaviors")
  private List<Behavior> behaviors = null;
  @SerializedName("category")
  private String category = null;
  public enum CouponTypeHintEnum {
     coupon_cart,  coupon_single_item,  coupon_voucher,  coupon_vendor,  coupon_tag, 
  };
  @SerializedName("coupon_type_hint")
  private CouponTypeHintEnum couponTypeHint = null;
  @SerializedName("created_date")
  private Long createdDate = null;
  @SerializedName("discount_max")
  private Double discountMax = null;
  @SerializedName("discount_min_cart_value")
  private Double discountMinCartValue = null;
  public enum DiscountTypeEnum {
     value,  percentage, 
  };
  @SerializedName("discount_type")
  private DiscountTypeEnum discountType = null;
  @SerializedName("discount_value")
  private Double discountValue = null;
  @SerializedName("displayable")
  private Boolean displayable = null;
  @SerializedName("exclusive")
  private Boolean exclusive = null;
  @SerializedName("geo_country_list")
  private List<String> geoCountryList = null;
  public enum GeoPolicyTypeEnum {
     whitelist,  blacklist, 
  };
  @SerializedName("geo_policy_type")
  private GeoPolicyTypeEnum geoPolicyType = null;
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("item_id")
  private Integer itemId = null;
  @SerializedName("long_description")
  private String longDescription = null;
  @SerializedName("max_quantity")
  private Integer maxQuantity = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("self_exclusive")
  private Boolean selfExclusive = null;
  @SerializedName("shipping_tier")
  private Integer shippingTier = null;
  @SerializedName("short_description")
  private String shortDescription = null;
  @SerializedName("skus")
  private List<Sku> skus = null;
  @SerializedName("sort")
  private Integer sort = null;
  @SerializedName("store_end")
  private Long storeEnd = null;
  @SerializedName("store_start")
  private Long storeStart = null;
  @SerializedName("tags")
  private List<String> tags = null;
  @SerializedName("template")
  private String template = null;
  @SerializedName("type_hint")
  private String typeHint = null;
  @SerializedName("unique_key")
  private String uniqueKey = null;
  @SerializedName("updated_date")
  private Long updatedDate = null;
  @SerializedName("valid_for_tags")
  private List<String> validForTags = null;
  @SerializedName("vendor_id")
  private Integer vendorId = null;

  /**
   * A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
   **/
  @ApiModelProperty(value = "A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template")
  public Map<String, Property> getAdditionalProperties() {
    return additionalProperties;
  }
  public void setAdditionalProperties(Map<String, Property> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }

  /**
   * The behaviors linked to the item, describing various options and interactions. May not be included in item lists
   **/
  @ApiModelProperty(value = "The behaviors linked to the item, describing various options and interactions. May not be included in item lists")
  public List<Behavior> getBehaviors() {
    return behaviors;
  }
  public void setBehaviors(List<Behavior> behaviors) {
    this.behaviors = behaviors;
  }

  /**
   * A category for filtering items
   **/
  @ApiModelProperty(value = "A category for filtering items")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }

  /**
   * The type of coupon
   **/
  @ApiModelProperty(required = true, value = "The type of coupon")
  public CouponTypeHintEnum getCouponTypeHint() {
    return couponTypeHint;
  }
  public void setCouponTypeHint(CouponTypeHintEnum couponTypeHint) {
    this.couponTypeHint = couponTypeHint;
  }

  /**
   * The date the item was created, unix timestamp in seconds
   **/
  @ApiModelProperty(value = "The date the item was created, unix timestamp in seconds")
  public Long getCreatedDate() {
    return createdDate;
  }
  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }

  /**
   * The amount this coupon is maxed out at.  Applies if coupon_type_hint is coupon_cart
   **/
  @ApiModelProperty(value = "The amount this coupon is maxed out at.  Applies if coupon_type_hint is coupon_cart")
  public Double getDiscountMax() {
    return discountMax;
  }
  public void setDiscountMax(Double discountMax) {
    this.discountMax = discountMax;
  }

  /**
   * The minimium amount needed in the cart for the coupon to apply.  Applies if coupon_type_hint is coupon_cart
   **/
  @ApiModelProperty(value = "The minimium amount needed in the cart for the coupon to apply.  Applies if coupon_type_hint is coupon_cart")
  public Double getDiscountMinCartValue() {
    return discountMinCartValue;
  }
  public void setDiscountMinCartValue(Double discountMinCartValue) {
    this.discountMinCartValue = discountMinCartValue;
  }

  /**
   * The type of discount in terms of how it deducts price. Value based discount not available for coupon_cart type coupons
   **/
  @ApiModelProperty(required = true, value = "The type of discount in terms of how it deducts price. Value based discount not available for coupon_cart type coupons")
  public DiscountTypeEnum getDiscountType() {
    return discountType;
  }
  public void setDiscountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
  }

  /**
   * The amount the coupon will discount the item. If discount_type is 'value' this will be a flat amount of currency. If discount type is 'percentage' this will be a fraction (0.2 for 20% off) multiplied by the price of the matching item or items.
   **/
  @ApiModelProperty(required = true, value = "The amount the coupon will discount the item. If discount_type is 'value' this will be a flat amount of currency. If discount type is 'percentage' this will be a fraction (0.2 for 20% off) multiplied by the price of the matching item or items.")
  public Double getDiscountValue() {
    return discountValue;
  }
  public void setDiscountValue(Double discountValue) {
    this.discountValue = discountValue;
  }

  /**
   * Whether or not the item is currently displayable.  Default = true
   **/
  @ApiModelProperty(value = "Whether or not the item is currently displayable.  Default = true")
  public Boolean getDisplayable() {
    return displayable;
  }
  public void setDisplayable(Boolean displayable) {
    this.displayable = displayable;
  }

  /**
   * Whether this coupon is exclusive or not (true means cannot be in same cart as another).  Default = false
   **/
  @ApiModelProperty(value = "Whether this coupon is exclusive or not (true means cannot be in same cart as another).  Default = false")
  public Boolean getExclusive() {
    return exclusive;
  }
  public void setExclusive(Boolean exclusive) {
    this.exclusive = exclusive;
  }

  /**
   * A list of country ID to include in the blacklist/whitelist geo policy
   **/
  @ApiModelProperty(value = "A list of country ID to include in the blacklist/whitelist geo policy")
  public List<String> getGeoCountryList() {
    return geoCountryList;
  }
  public void setGeoCountryList(List<String> geoCountryList) {
    this.geoCountryList = geoCountryList;
  }

  /**
   * Whether to use the geo_country_list as a black list or white list for item geographical availability
   **/
  @ApiModelProperty(value = "Whether to use the geo_country_list as a black list or white list for item geographical availability")
  public GeoPolicyTypeEnum getGeoPolicyType() {
    return geoPolicyType;
  }
  public void setGeoPolicyType(GeoPolicyTypeEnum geoPolicyType) {
    this.geoPolicyType = geoPolicyType;
  }

  /**
   * The id of the item
   **/
  @ApiModelProperty(value = "The id of the item")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * The id of the item the coupon is applied to.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher
   **/
  @ApiModelProperty(value = "The id of the item the coupon is applied to.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher")
  public Integer getItemId() {
    return itemId;
  }
  public void setItemId(Integer itemId) {
    this.itemId = itemId;
  }

  /**
   * A long description of the item
   **/
  @ApiModelProperty(value = "A long description of the item")
  public String getLongDescription() {
    return longDescription;
  }
  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }

  /**
   * The maximum quantity of items the coupon can apply to, null if no limit and minimum 1 otherwise.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher
   **/
  @ApiModelProperty(value = "The maximum quantity of items the coupon can apply to, null if no limit and minimum 1 otherwise.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher")
  public Integer getMaxQuantity() {
    return maxQuantity;
  }
  public void setMaxQuantity(Integer maxQuantity) {
    this.maxQuantity = maxQuantity;
  }

  /**
   * The name of the item
   **/
  @ApiModelProperty(required = true, value = "The name of the item")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Whether this coupon is exclusive to itself or not (true means cannot add two of this same coupon to the same cart).  Default = false
   **/
  @ApiModelProperty(value = "Whether this coupon is exclusive to itself or not (true means cannot add two of this same coupon to the same cart).  Default = false")
  public Boolean getSelfExclusive() {
    return selfExclusive;
  }
  public void setSelfExclusive(Boolean selfExclusive) {
    this.selfExclusive = selfExclusive;
  }

  /**
   * Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default = 0
   **/
  @ApiModelProperty(value = "Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default = 0")
  public Integer getShippingTier() {
    return shippingTier;
  }
  public void setShippingTier(Integer shippingTier) {
    this.shippingTier = shippingTier;
  }

  /**
   * A short description of the item, max 255 chars
   **/
  @ApiModelProperty(value = "A short description of the item, max 255 chars")
  public String getShortDescription() {
    return shortDescription;
  }
  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }

  /**
   * The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart
   **/
  @ApiModelProperty(required = true, value = "The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart")
  public List<Sku> getSkus() {
    return skus;
  }
  public void setSkus(List<Sku> skus) {
    this.skus = skus;
  }

  /**
   * A number to use in sorting items.  Default 500
   **/
  @ApiModelProperty(value = "A number to use in sorting items.  Default 500")
  public Integer getSort() {
    return sort;
  }
  public void setSort(Integer sort) {
    this.sort = sort;
  }

  /**
   * The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store
   **/
  @ApiModelProperty(value = "The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store")
  public Long getStoreEnd() {
    return storeEnd;
  }
  public void setStoreEnd(Long storeEnd) {
    this.storeEnd = storeEnd;
  }

  /**
   * The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately
   **/
  @ApiModelProperty(value = "The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately")
  public Long getStoreStart() {
    return storeStart;
  }
  public void setStoreStart(Long storeStart) {
    this.storeStart = storeStart;
  }

  /**
   * List of tags used for filtering items
   **/
  @ApiModelProperty(value = "List of tags used for filtering items")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  /**
   * An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default = null
   **/
  @ApiModelProperty(value = "An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default = null")
  public String getTemplate() {
    return template;
  }
  public void setTemplate(String template) {
    this.template = template;
  }

  /**
   * The type of the item
   **/
  @ApiModelProperty(required = true, value = "The type of the item")
  public String getTypeHint() {
    return typeHint;
  }
  public void setTypeHint(String typeHint) {
    this.typeHint = typeHint;
  }

  /**
   * The unique key for the item
   **/
  @ApiModelProperty(value = "The unique key for the item")
  public String getUniqueKey() {
    return uniqueKey;
  }
  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }

  /**
   * The date the item was last updated, unix timestamp in seconds
   **/
  @ApiModelProperty(value = "The date the item was last updated, unix timestamp in seconds")
  public Long getUpdatedDate() {
    return updatedDate;
  }
  public void setUpdatedDate(Long updatedDate) {
    this.updatedDate = updatedDate;
  }

  /**
   * A list of tags for a coupon.  The coupon can only apply to an item that has at least one of these tags.  Applies if coupon_type_hint is coupon_tag
   **/
  @ApiModelProperty(value = "A list of tags for a coupon.  The coupon can only apply to an item that has at least one of these tags.  Applies if coupon_type_hint is coupon_tag")
  public List<String> getValidForTags() {
    return validForTags;
  }
  public void setValidForTags(List<String> validForTags) {
    this.validForTags = validForTags;
  }

  /**
   * The vendor who provides the item
   **/
  @ApiModelProperty(required = true, value = "The vendor who provides the item")
  public Integer getVendorId() {
    return vendorId;
  }
  public void setVendorId(Integer vendorId) {
    this.vendorId = vendorId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponItem couponItem = (CouponItem) o;
    return (this.additionalProperties == null ? couponItem.additionalProperties == null : this.additionalProperties.equals(couponItem.additionalProperties)) &&
        (this.behaviors == null ? couponItem.behaviors == null : this.behaviors.equals(couponItem.behaviors)) &&
        (this.category == null ? couponItem.category == null : this.category.equals(couponItem.category)) &&
        (this.couponTypeHint == null ? couponItem.couponTypeHint == null : this.couponTypeHint.equals(couponItem.couponTypeHint)) &&
        (this.createdDate == null ? couponItem.createdDate == null : this.createdDate.equals(couponItem.createdDate)) &&
        (this.discountMax == null ? couponItem.discountMax == null : this.discountMax.equals(couponItem.discountMax)) &&
        (this.discountMinCartValue == null ? couponItem.discountMinCartValue == null : this.discountMinCartValue.equals(couponItem.discountMinCartValue)) &&
        (this.discountType == null ? couponItem.discountType == null : this.discountType.equals(couponItem.discountType)) &&
        (this.discountValue == null ? couponItem.discountValue == null : this.discountValue.equals(couponItem.discountValue)) &&
        (this.displayable == null ? couponItem.displayable == null : this.displayable.equals(couponItem.displayable)) &&
        (this.exclusive == null ? couponItem.exclusive == null : this.exclusive.equals(couponItem.exclusive)) &&
        (this.geoCountryList == null ? couponItem.geoCountryList == null : this.geoCountryList.equals(couponItem.geoCountryList)) &&
        (this.geoPolicyType == null ? couponItem.geoPolicyType == null : this.geoPolicyType.equals(couponItem.geoPolicyType)) &&
        (this.id == null ? couponItem.id == null : this.id.equals(couponItem.id)) &&
        (this.itemId == null ? couponItem.itemId == null : this.itemId.equals(couponItem.itemId)) &&
        (this.longDescription == null ? couponItem.longDescription == null : this.longDescription.equals(couponItem.longDescription)) &&
        (this.maxQuantity == null ? couponItem.maxQuantity == null : this.maxQuantity.equals(couponItem.maxQuantity)) &&
        (this.name == null ? couponItem.name == null : this.name.equals(couponItem.name)) &&
        (this.selfExclusive == null ? couponItem.selfExclusive == null : this.selfExclusive.equals(couponItem.selfExclusive)) &&
        (this.shippingTier == null ? couponItem.shippingTier == null : this.shippingTier.equals(couponItem.shippingTier)) &&
        (this.shortDescription == null ? couponItem.shortDescription == null : this.shortDescription.equals(couponItem.shortDescription)) &&
        (this.skus == null ? couponItem.skus == null : this.skus.equals(couponItem.skus)) &&
        (this.sort == null ? couponItem.sort == null : this.sort.equals(couponItem.sort)) &&
        (this.storeEnd == null ? couponItem.storeEnd == null : this.storeEnd.equals(couponItem.storeEnd)) &&
        (this.storeStart == null ? couponItem.storeStart == null : this.storeStart.equals(couponItem.storeStart)) &&
        (this.tags == null ? couponItem.tags == null : this.tags.equals(couponItem.tags)) &&
        (this.template == null ? couponItem.template == null : this.template.equals(couponItem.template)) &&
        (this.typeHint == null ? couponItem.typeHint == null : this.typeHint.equals(couponItem.typeHint)) &&
        (this.uniqueKey == null ? couponItem.uniqueKey == null : this.uniqueKey.equals(couponItem.uniqueKey)) &&
        (this.updatedDate == null ? couponItem.updatedDate == null : this.updatedDate.equals(couponItem.updatedDate)) &&
        (this.validForTags == null ? couponItem.validForTags == null : this.validForTags.equals(couponItem.validForTags)) &&
        (this.vendorId == null ? couponItem.vendorId == null : this.vendorId.equals(couponItem.vendorId));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.additionalProperties == null ? 0: this.additionalProperties.hashCode());
    result = 31 * result + (this.behaviors == null ? 0: this.behaviors.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.couponTypeHint == null ? 0: this.couponTypeHint.hashCode());
    result = 31 * result + (this.createdDate == null ? 0: this.createdDate.hashCode());
    result = 31 * result + (this.discountMax == null ? 0: this.discountMax.hashCode());
    result = 31 * result + (this.discountMinCartValue == null ? 0: this.discountMinCartValue.hashCode());
    result = 31 * result + (this.discountType == null ? 0: this.discountType.hashCode());
    result = 31 * result + (this.discountValue == null ? 0: this.discountValue.hashCode());
    result = 31 * result + (this.displayable == null ? 0: this.displayable.hashCode());
    result = 31 * result + (this.exclusive == null ? 0: this.exclusive.hashCode());
    result = 31 * result + (this.geoCountryList == null ? 0: this.geoCountryList.hashCode());
    result = 31 * result + (this.geoPolicyType == null ? 0: this.geoPolicyType.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.itemId == null ? 0: this.itemId.hashCode());
    result = 31 * result + (this.longDescription == null ? 0: this.longDescription.hashCode());
    result = 31 * result + (this.maxQuantity == null ? 0: this.maxQuantity.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.selfExclusive == null ? 0: this.selfExclusive.hashCode());
    result = 31 * result + (this.shippingTier == null ? 0: this.shippingTier.hashCode());
    result = 31 * result + (this.shortDescription == null ? 0: this.shortDescription.hashCode());
    result = 31 * result + (this.skus == null ? 0: this.skus.hashCode());
    result = 31 * result + (this.sort == null ? 0: this.sort.hashCode());
    result = 31 * result + (this.storeEnd == null ? 0: this.storeEnd.hashCode());
    result = 31 * result + (this.storeStart == null ? 0: this.storeStart.hashCode());
    result = 31 * result + (this.tags == null ? 0: this.tags.hashCode());
    result = 31 * result + (this.template == null ? 0: this.template.hashCode());
    result = 31 * result + (this.typeHint == null ? 0: this.typeHint.hashCode());
    result = 31 * result + (this.uniqueKey == null ? 0: this.uniqueKey.hashCode());
    result = 31 * result + (this.updatedDate == null ? 0: this.updatedDate.hashCode());
    result = 31 * result + (this.validForTags == null ? 0: this.validForTags.hashCode());
    result = 31 * result + (this.vendorId == null ? 0: this.vendorId.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponItem {\n");
    
    sb.append("  additionalProperties: ").append(additionalProperties).append("\n");
    sb.append("  behaviors: ").append(behaviors).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  couponTypeHint: ").append(couponTypeHint).append("\n");
    sb.append("  createdDate: ").append(createdDate).append("\n");
    sb.append("  discountMax: ").append(discountMax).append("\n");
    sb.append("  discountMinCartValue: ").append(discountMinCartValue).append("\n");
    sb.append("  discountType: ").append(discountType).append("\n");
    sb.append("  discountValue: ").append(discountValue).append("\n");
    sb.append("  displayable: ").append(displayable).append("\n");
    sb.append("  exclusive: ").append(exclusive).append("\n");
    sb.append("  geoCountryList: ").append(geoCountryList).append("\n");
    sb.append("  geoPolicyType: ").append(geoPolicyType).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  itemId: ").append(itemId).append("\n");
    sb.append("  longDescription: ").append(longDescription).append("\n");
    sb.append("  maxQuantity: ").append(maxQuantity).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  selfExclusive: ").append(selfExclusive).append("\n");
    sb.append("  shippingTier: ").append(shippingTier).append("\n");
    sb.append("  shortDescription: ").append(shortDescription).append("\n");
    sb.append("  skus: ").append(skus).append("\n");
    sb.append("  sort: ").append(sort).append("\n");
    sb.append("  storeEnd: ").append(storeEnd).append("\n");
    sb.append("  storeStart: ").append(storeStart).append("\n");
    sb.append("  tags: ").append(tags).append("\n");
    sb.append("  template: ").append(template).append("\n");
    sb.append("  typeHint: ").append(typeHint).append("\n");
    sb.append("  uniqueKey: ").append(uniqueKey).append("\n");
    sb.append("  updatedDate: ").append(updatedDate).append("\n");
    sb.append("  validForTags: ").append(validForTags).append("\n");
    sb.append("  vendorId: ").append(vendorId).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
