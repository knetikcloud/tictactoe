/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.BreGlobalScopeDefinition;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class BreGlobalResource {
  
  @SerializedName("description")
  private String description = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("key")
  private String key = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("scopes")
  private List<BreGlobalScopeDefinition> scopes = null;
  @SerializedName("system_global")
  private Boolean systemGlobal = null;
  @SerializedName("type")
  private String type = null;

  /**
   * A human readable description for display in admin pages
   **/
  @ApiModelProperty(value = "A human readable description for display in admin pages")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * The id of the global definition. Default is a random guid. Cannot be updated
   **/
  @ApiModelProperty(value = "The id of the global definition. Default is a random guid. Cannot be updated")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * The key for the global. Must be unique when combined with scope names. Usually a single descriptive word like 'purchases' or 'logins'
   **/
  @ApiModelProperty(required = true, value = "The key for the global. Must be unique when combined with scope names. Usually a single descriptive word like 'purchases' or 'logins'")
  public String getKey() {
    return key;
  }
  public void setKey(String key) {
    this.key = key;
  }

  /**
   * A human readable name for display in admin pages
   **/
  @ApiModelProperty(value = "A human readable name for display in admin pages")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * A list of scoping parameters. Allows the global to have a different value in different context such as a count of purchases for each user (by putting a 'user' scope in this list). When using this global in a rule these scopes will need to be mapped with an expression to provide a value, similar to the parameters in an action
   **/
  @ApiModelProperty(value = "A list of scoping parameters. Allows the global to have a different value in different context such as a count of purchases for each user (by putting a 'user' scope in this list). When using this global in a rule these scopes will need to be mapped with an expression to provide a value, similar to the parameters in an action")
  public List<BreGlobalScopeDefinition> getScopes() {
    return scopes;
  }
  public void setScopes(List<BreGlobalScopeDefinition> scopes) {
    this.scopes = scopes;
  }

  /**
   * Where this global came from. System globals cannot be removed or updated
   **/
  @ApiModelProperty(value = "Where this global came from. System globals cannot be removed or updated")
  public Boolean getSystemGlobal() {
    return systemGlobal;
  }
  public void setSystemGlobal(Boolean systemGlobal) {
    this.systemGlobal = systemGlobal;
  }

  /**
   * The variable type the global stores. See the See Bre Variables enpoint for list
   **/
  @ApiModelProperty(required = true, value = "The variable type the global stores. See the See Bre Variables enpoint for list")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreGlobalResource breGlobalResource = (BreGlobalResource) o;
    return (this.description == null ? breGlobalResource.description == null : this.description.equals(breGlobalResource.description)) &&
        (this.id == null ? breGlobalResource.id == null : this.id.equals(breGlobalResource.id)) &&
        (this.key == null ? breGlobalResource.key == null : this.key.equals(breGlobalResource.key)) &&
        (this.name == null ? breGlobalResource.name == null : this.name.equals(breGlobalResource.name)) &&
        (this.scopes == null ? breGlobalResource.scopes == null : this.scopes.equals(breGlobalResource.scopes)) &&
        (this.systemGlobal == null ? breGlobalResource.systemGlobal == null : this.systemGlobal.equals(breGlobalResource.systemGlobal)) &&
        (this.type == null ? breGlobalResource.type == null : this.type.equals(breGlobalResource.type));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.key == null ? 0: this.key.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.scopes == null ? 0: this.scopes.hashCode());
    result = 31 * result + (this.systemGlobal == null ? 0: this.systemGlobal.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreGlobalResource {\n");
    
    sb.append("  description: ").append(description).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  key: ").append(key).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  scopes: ").append(scopes).append("\n");
    sb.append("  systemGlobal: ").append(systemGlobal).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
