/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.ActivityEntitlementResource;
import com.knetikcloud.model.ActivityUserResource;
import com.knetikcloud.model.SelectedSettingResource;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ActivityOccurrenceResource {
  
  @SerializedName("activity_id")
  private Long activityId = null;
  @SerializedName("challenge_activity_id")
  private Long challengeActivityId = null;
  @SerializedName("created_date")
  private Long createdDate = null;
  @SerializedName("entitlement")
  private ActivityEntitlementResource entitlement = null;
  @SerializedName("event_id")
  private Long eventId = null;
  @SerializedName("id")
  private Long id = null;
  public enum RewardStatusEnum {
     pending,  failed,  complete,  partial, 
  };
  @SerializedName("reward_status")
  private RewardStatusEnum rewardStatus = null;
  @SerializedName("settings")
  private List<SelectedSettingResource> settings = null;
  @SerializedName("simulated")
  private Boolean simulated = null;
  @SerializedName("start_date")
  private Long startDate = null;
  public enum StatusEnum {
     SETUP,  OPEN,  PLAYING,  FINISHED,  ABANDONED, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("updated_date")
  private Long updatedDate = null;
  @SerializedName("users")
  private List<ActivityUserResource> users = null;

  /**
   * The id of the activity
   **/
  @ApiModelProperty(required = true, value = "The id of the activity")
  public Long getActivityId() {
    return activityId;
  }
  public void setActivityId(Long activityId) {
    this.activityId = activityId;
  }

  /**
   * The id of the challenge activity (as part of the event, required if eventId set)
   **/
  @ApiModelProperty(value = "The id of the challenge activity (as part of the event, required if eventId set)")
  public Long getChallengeActivityId() {
    return challengeActivityId;
  }
  public void setChallengeActivityId(Long challengeActivityId) {
    this.challengeActivityId = challengeActivityId;
  }

  /**
   * The date this occurrence was created, unix timestamp in seconds
   **/
  @ApiModelProperty(value = "The date this occurrence was created, unix timestamp in seconds")
  public Long getCreatedDate() {
    return createdDate;
  }
  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }

  /**
   * The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
   **/
  @ApiModelProperty(value = "The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity")
  public ActivityEntitlementResource getEntitlement() {
    return entitlement;
  }
  public void setEntitlement(ActivityEntitlementResource entitlement) {
    this.entitlement = entitlement;
  }

  /**
   * The id of the event
   **/
  @ApiModelProperty(value = "The id of the event")
  public Long getEventId() {
    return eventId;
  }
  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }

  /**
   * The id of the activity occurrence
   **/
  @ApiModelProperty(value = "The id of the activity occurrence")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Indicate if the rewards have been given out already
   **/
  @ApiModelProperty(value = "Indicate if the rewards have been given out already")
  public RewardStatusEnum getRewardStatus() {
    return rewardStatus;
  }
  public void setRewardStatus(RewardStatusEnum rewardStatus) {
    this.rewardStatus = rewardStatus;
  }

  /**
   * The list of settings and their options available for this activity. Should be null on create if and only if part of an event. Otherwise, the set must exactly match those of the activity.
   **/
  @ApiModelProperty(value = "The list of settings and their options available for this activity. Should be null on create if and only if part of an event. Otherwise, the set must exactly match those of the activity.")
  public List<SelectedSettingResource> getSettings() {
    return settings;
  }
  public void setSettings(List<SelectedSettingResource> settings) {
    this.settings = settings;
  }

  /**
   * Whether this occurrence will be played as a simulation.
   **/
  @ApiModelProperty(value = "Whether this occurrence will be played as a simulation.")
  public Boolean getSimulated() {
    return simulated;
  }
  public void setSimulated(Boolean simulated) {
    this.simulated = simulated;
  }

  /**
   * The date this occurrence was started, unix timestamp in seconds. null if not yet started
   **/
  @ApiModelProperty(value = "The date this occurrence was started, unix timestamp in seconds. null if not yet started")
  public Long getStartDate() {
    return startDate;
  }
  public void setStartDate(Long startDate) {
    this.startDate = startDate;
  }

  /**
   * The current status of the occurrence (default: OPEN)
   **/
  @ApiModelProperty(value = "The current status of the occurrence (default: OPEN)")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   * The date this occurrence was last updated, unix timestamp in seconds
   **/
  @ApiModelProperty(value = "The date this occurrence was last updated, unix timestamp in seconds")
  public Long getUpdatedDate() {
    return updatedDate;
  }
  public void setUpdatedDate(Long updatedDate) {
    this.updatedDate = updatedDate;
  }

  /**
   * The list of users playing in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
   **/
  @ApiModelProperty(value = "The list of users playing in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission")
  public List<ActivityUserResource> getUsers() {
    return users;
  }
  public void setUsers(List<ActivityUserResource> users) {
    this.users = users;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityOccurrenceResource activityOccurrenceResource = (ActivityOccurrenceResource) o;
    return (this.activityId == null ? activityOccurrenceResource.activityId == null : this.activityId.equals(activityOccurrenceResource.activityId)) &&
        (this.challengeActivityId == null ? activityOccurrenceResource.challengeActivityId == null : this.challengeActivityId.equals(activityOccurrenceResource.challengeActivityId)) &&
        (this.createdDate == null ? activityOccurrenceResource.createdDate == null : this.createdDate.equals(activityOccurrenceResource.createdDate)) &&
        (this.entitlement == null ? activityOccurrenceResource.entitlement == null : this.entitlement.equals(activityOccurrenceResource.entitlement)) &&
        (this.eventId == null ? activityOccurrenceResource.eventId == null : this.eventId.equals(activityOccurrenceResource.eventId)) &&
        (this.id == null ? activityOccurrenceResource.id == null : this.id.equals(activityOccurrenceResource.id)) &&
        (this.rewardStatus == null ? activityOccurrenceResource.rewardStatus == null : this.rewardStatus.equals(activityOccurrenceResource.rewardStatus)) &&
        (this.settings == null ? activityOccurrenceResource.settings == null : this.settings.equals(activityOccurrenceResource.settings)) &&
        (this.simulated == null ? activityOccurrenceResource.simulated == null : this.simulated.equals(activityOccurrenceResource.simulated)) &&
        (this.startDate == null ? activityOccurrenceResource.startDate == null : this.startDate.equals(activityOccurrenceResource.startDate)) &&
        (this.status == null ? activityOccurrenceResource.status == null : this.status.equals(activityOccurrenceResource.status)) &&
        (this.updatedDate == null ? activityOccurrenceResource.updatedDate == null : this.updatedDate.equals(activityOccurrenceResource.updatedDate)) &&
        (this.users == null ? activityOccurrenceResource.users == null : this.users.equals(activityOccurrenceResource.users));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.activityId == null ? 0: this.activityId.hashCode());
    result = 31 * result + (this.challengeActivityId == null ? 0: this.challengeActivityId.hashCode());
    result = 31 * result + (this.createdDate == null ? 0: this.createdDate.hashCode());
    result = 31 * result + (this.entitlement == null ? 0: this.entitlement.hashCode());
    result = 31 * result + (this.eventId == null ? 0: this.eventId.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.rewardStatus == null ? 0: this.rewardStatus.hashCode());
    result = 31 * result + (this.settings == null ? 0: this.settings.hashCode());
    result = 31 * result + (this.simulated == null ? 0: this.simulated.hashCode());
    result = 31 * result + (this.startDate == null ? 0: this.startDate.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.updatedDate == null ? 0: this.updatedDate.hashCode());
    result = 31 * result + (this.users == null ? 0: this.users.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityOccurrenceResource {\n");
    
    sb.append("  activityId: ").append(activityId).append("\n");
    sb.append("  challengeActivityId: ").append(challengeActivityId).append("\n");
    sb.append("  createdDate: ").append(createdDate).append("\n");
    sb.append("  entitlement: ").append(entitlement).append("\n");
    sb.append("  eventId: ").append(eventId).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  rewardStatus: ").append(rewardStatus).append("\n");
    sb.append("  settings: ").append(settings).append("\n");
    sb.append("  simulated: ").append(simulated).append("\n");
    sb.append("  startDate: ").append(startDate).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  updatedDate: ").append(updatedDate).append("\n");
    sb.append("  users: ").append(users).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
