/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.CartLineItem;
import com.knetikcloud.model.CartShippingAddressRequest;
import com.knetikcloud.model.CartShippingOption;
import com.knetikcloud.model.CouponDefinition;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Cart {
  
  @SerializedName("available_shipping_options")
  private List<CartShippingOption> availableShippingOptions = null;
  @SerializedName("country_tax")
  private Double countryTax = null;
  @SerializedName("coupons")
  private List<CouponDefinition> coupons = null;
  @SerializedName("created")
  private Long created = null;
  @SerializedName("currency_code")
  private String currencyCode = null;
  @SerializedName("discount_total")
  private Double discountTotal = null;
  @SerializedName("error_code")
  private Integer errorCode = null;
  @SerializedName("error_message")
  private String errorMessage = null;
  @SerializedName("grand_total")
  private Double grandTotal = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("invoice_id")
  private Double invoiceId = null;
  @SerializedName("items")
  private List<CartLineItem> items = null;
  @SerializedName("owner")
  private Integer owner = null;
  @SerializedName("selected_shipping_options")
  private List<CartShippingOption> selectedShippingOptions = null;
  @SerializedName("shippable")
  private Boolean shippable = null;
  @SerializedName("shipping_address")
  private CartShippingAddressRequest shippingAddress = null;
  @SerializedName("shipping_cost")
  private Double shippingCost = null;
  @SerializedName("state_tax")
  private Double stateTax = null;
  public enum StatusEnum {
     active,  processing,  closed,  onhold, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("subtotal")
  private Double subtotal = null;
  @SerializedName("updated")
  private Long updated = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public List<CartShippingOption> getAvailableShippingOptions() {
    return availableShippingOptions;
  }
  public void setAvailableShippingOptions(List<CartShippingOption> availableShippingOptions) {
    this.availableShippingOptions = availableShippingOptions;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getCountryTax() {
    return countryTax;
  }
  public void setCountryTax(Double countryTax) {
    this.countryTax = countryTax;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<CouponDefinition> getCoupons() {
    return coupons;
  }
  public void setCoupons(List<CouponDefinition> coupons) {
    this.coupons = coupons;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Long getCreated() {
    return created;
  }
  public void setCreated(Long created) {
    this.created = created;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getDiscountTotal() {
    return discountTotal;
  }
  public void setDiscountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getErrorCode() {
    return errorCode;
  }
  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getErrorMessage() {
    return errorMessage;
  }
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getGrandTotal() {
    return grandTotal;
  }
  public void setGrandTotal(Double grandTotal) {
    this.grandTotal = grandTotal;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getInvoiceId() {
    return invoiceId;
  }
  public void setInvoiceId(Double invoiceId) {
    this.invoiceId = invoiceId;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<CartLineItem> getItems() {
    return items;
  }
  public void setItems(List<CartLineItem> items) {
    this.items = items;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getOwner() {
    return owner;
  }
  public void setOwner(Integer owner) {
    this.owner = owner;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<CartShippingOption> getSelectedShippingOptions() {
    return selectedShippingOptions;
  }
  public void setSelectedShippingOptions(List<CartShippingOption> selectedShippingOptions) {
    this.selectedShippingOptions = selectedShippingOptions;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getShippable() {
    return shippable;
  }
  public void setShippable(Boolean shippable) {
    this.shippable = shippable;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CartShippingAddressRequest getShippingAddress() {
    return shippingAddress;
  }
  public void setShippingAddress(CartShippingAddressRequest shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getShippingCost() {
    return shippingCost;
  }
  public void setShippingCost(Double shippingCost) {
    this.shippingCost = shippingCost;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getStateTax() {
    return stateTax;
  }
  public void setStateTax(Double stateTax) {
    this.stateTax = stateTax;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getSubtotal() {
    return subtotal;
  }
  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Long getUpdated() {
    return updated;
  }
  public void setUpdated(Long updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return (this.availableShippingOptions == null ? cart.availableShippingOptions == null : this.availableShippingOptions.equals(cart.availableShippingOptions)) &&
        (this.countryTax == null ? cart.countryTax == null : this.countryTax.equals(cart.countryTax)) &&
        (this.coupons == null ? cart.coupons == null : this.coupons.equals(cart.coupons)) &&
        (this.created == null ? cart.created == null : this.created.equals(cart.created)) &&
        (this.currencyCode == null ? cart.currencyCode == null : this.currencyCode.equals(cart.currencyCode)) &&
        (this.discountTotal == null ? cart.discountTotal == null : this.discountTotal.equals(cart.discountTotal)) &&
        (this.errorCode == null ? cart.errorCode == null : this.errorCode.equals(cart.errorCode)) &&
        (this.errorMessage == null ? cart.errorMessage == null : this.errorMessage.equals(cart.errorMessage)) &&
        (this.grandTotal == null ? cart.grandTotal == null : this.grandTotal.equals(cart.grandTotal)) &&
        (this.id == null ? cart.id == null : this.id.equals(cart.id)) &&
        (this.invoiceId == null ? cart.invoiceId == null : this.invoiceId.equals(cart.invoiceId)) &&
        (this.items == null ? cart.items == null : this.items.equals(cart.items)) &&
        (this.owner == null ? cart.owner == null : this.owner.equals(cart.owner)) &&
        (this.selectedShippingOptions == null ? cart.selectedShippingOptions == null : this.selectedShippingOptions.equals(cart.selectedShippingOptions)) &&
        (this.shippable == null ? cart.shippable == null : this.shippable.equals(cart.shippable)) &&
        (this.shippingAddress == null ? cart.shippingAddress == null : this.shippingAddress.equals(cart.shippingAddress)) &&
        (this.shippingCost == null ? cart.shippingCost == null : this.shippingCost.equals(cart.shippingCost)) &&
        (this.stateTax == null ? cart.stateTax == null : this.stateTax.equals(cart.stateTax)) &&
        (this.status == null ? cart.status == null : this.status.equals(cart.status)) &&
        (this.subtotal == null ? cart.subtotal == null : this.subtotal.equals(cart.subtotal)) &&
        (this.updated == null ? cart.updated == null : this.updated.equals(cart.updated));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.availableShippingOptions == null ? 0: this.availableShippingOptions.hashCode());
    result = 31 * result + (this.countryTax == null ? 0: this.countryTax.hashCode());
    result = 31 * result + (this.coupons == null ? 0: this.coupons.hashCode());
    result = 31 * result + (this.created == null ? 0: this.created.hashCode());
    result = 31 * result + (this.currencyCode == null ? 0: this.currencyCode.hashCode());
    result = 31 * result + (this.discountTotal == null ? 0: this.discountTotal.hashCode());
    result = 31 * result + (this.errorCode == null ? 0: this.errorCode.hashCode());
    result = 31 * result + (this.errorMessage == null ? 0: this.errorMessage.hashCode());
    result = 31 * result + (this.grandTotal == null ? 0: this.grandTotal.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.invoiceId == null ? 0: this.invoiceId.hashCode());
    result = 31 * result + (this.items == null ? 0: this.items.hashCode());
    result = 31 * result + (this.owner == null ? 0: this.owner.hashCode());
    result = 31 * result + (this.selectedShippingOptions == null ? 0: this.selectedShippingOptions.hashCode());
    result = 31 * result + (this.shippable == null ? 0: this.shippable.hashCode());
    result = 31 * result + (this.shippingAddress == null ? 0: this.shippingAddress.hashCode());
    result = 31 * result + (this.shippingCost == null ? 0: this.shippingCost.hashCode());
    result = 31 * result + (this.stateTax == null ? 0: this.stateTax.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.subtotal == null ? 0: this.subtotal.hashCode());
    result = 31 * result + (this.updated == null ? 0: this.updated.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    
    sb.append("  availableShippingOptions: ").append(availableShippingOptions).append("\n");
    sb.append("  countryTax: ").append(countryTax).append("\n");
    sb.append("  coupons: ").append(coupons).append("\n");
    sb.append("  created: ").append(created).append("\n");
    sb.append("  currencyCode: ").append(currencyCode).append("\n");
    sb.append("  discountTotal: ").append(discountTotal).append("\n");
    sb.append("  errorCode: ").append(errorCode).append("\n");
    sb.append("  errorMessage: ").append(errorMessage).append("\n");
    sb.append("  grandTotal: ").append(grandTotal).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  invoiceId: ").append(invoiceId).append("\n");
    sb.append("  items: ").append(items).append("\n");
    sb.append("  owner: ").append(owner).append("\n");
    sb.append("  selectedShippingOptions: ").append(selectedShippingOptions).append("\n");
    sb.append("  shippable: ").append(shippable).append("\n");
    sb.append("  shippingAddress: ").append(shippingAddress).append("\n");
    sb.append("  shippingCost: ").append(shippingCost).append("\n");
    sb.append("  stateTax: ").append(stateTax).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  subtotal: ").append(subtotal).append("\n");
    sb.append("  updated: ").append(updated).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
