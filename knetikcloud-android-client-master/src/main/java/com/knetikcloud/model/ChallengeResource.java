/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.model;

import com.knetikcloud.model.Property;
import com.knetikcloud.model.RewardSetResource;
import com.knetikcloud.model.Schedule;
import java.util.*;
import java.util.Map;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ChallengeResource {
  
  @SerializedName("activities")
  private Integer activities = null;
  @SerializedName("additional_properties")
  private Map<String, Property> additionalProperties = null;
  @SerializedName("campaign_id")
  private Long campaignId = null;
  @SerializedName("copy_of")
  private Long copyOf = null;
  @SerializedName("created_date")
  private Long createdDate = null;
  @SerializedName("end_date")
  private Long endDate = null;
  @SerializedName("id")
  private Long id = null;
  @SerializedName("leaderboard_strategy")
  private String leaderboardStrategy = null;
  @SerializedName("long_description")
  private String longDescription = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("next_event_date")
  private Long nextEventDate = null;
  @SerializedName("reward_lag_minutes")
  private Integer rewardLagMinutes = null;
  @SerializedName("reward_set")
  private RewardSetResource rewardSet = null;
  @SerializedName("schedule")
  private Schedule schedule = null;
  @SerializedName("short_description")
  private String shortDescription = null;
  @SerializedName("start_date")
  private Long startDate = null;
  @SerializedName("template")
  private String template = null;
  @SerializedName("updated_date")
  private Long updatedDate = null;

  /**
   * The number of activities allowed to this challenge
   **/
  @ApiModelProperty(value = "The number of activities allowed to this challenge")
  public Integer getActivities() {
    return activities;
  }
  public void setActivities(Integer activities) {
    this.activities = activities;
  }

  /**
   * A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
   **/
  @ApiModelProperty(value = "A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type")
  public Map<String, Property> getAdditionalProperties() {
    return additionalProperties;
  }
  public void setAdditionalProperties(Map<String, Property> additionalProperties) {
    this.additionalProperties = additionalProperties;
  }

  /**
   * The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events
   **/
  @ApiModelProperty(value = "The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events")
  public Long getCampaignId() {
    return campaignId;
  }
  public void setCampaignId(Long campaignId) {
    this.campaignId = campaignId;
  }

  /**
   * The ID of the original challenge it was copied from
   **/
  @ApiModelProperty(value = "The ID of the original challenge it was copied from")
  public Long getCopyOf() {
    return copyOf;
  }
  public void setCopyOf(Long copyOf) {
    this.copyOf = copyOf;
  }

  /**
   * The date/time this resource was created in seconds since unix epoch
   **/
  @ApiModelProperty(value = "The date/time this resource was created in seconds since unix epoch")
  public Long getCreatedDate() {
    return createdDate;
  }
  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }

  /**
   * The end date of this challenge in seconds since epoch. required if part of a campaign
   **/
  @ApiModelProperty(value = "The end date of this challenge in seconds since epoch. required if part of a campaign")
  public Long getEndDate() {
    return endDate;
  }
  public void setEndDate(Long endDate) {
    this.endDate = endDate;
  }

  /**
   * The unique ID for that resource
   **/
  @ApiModelProperty(value = "The unique ID for that resource")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.
   **/
  @ApiModelProperty(value = "The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.")
  public String getLeaderboardStrategy() {
    return leaderboardStrategy;
  }
  public void setLeaderboardStrategy(String leaderboardStrategy) {
    this.leaderboardStrategy = leaderboardStrategy;
  }

  /**
   * The user friendly name of that resource. Defaults to blank string
   **/
  @ApiModelProperty(value = "The user friendly name of that resource. Defaults to blank string")
  public String getLongDescription() {
    return longDescription;
  }
  public void setLongDescription(String longDescription) {
    this.longDescription = longDescription;
  }

  /**
   * The user friendly name of that resource
   **/
  @ApiModelProperty(required = true, value = "The user friendly name of that resource")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * The next date this challenge will be occur in seconds since epoch
   **/
  @ApiModelProperty(value = "The next date this challenge will be occur in seconds since epoch")
  public Long getNextEventDate() {
    return nextEventDate;
  }
  public void setNextEventDate(Long nextEventDate) {
    this.nextEventDate = nextEventDate;
  }

  /**
   * The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete
   **/
  @ApiModelProperty(value = "The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete")
  public Integer getRewardLagMinutes() {
    return rewardLagMinutes;
  }
  public void setRewardLagMinutes(Integer rewardLagMinutes) {
    this.rewardLagMinutes = rewardLagMinutes;
  }

  /**
   * The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing
   **/
  @ApiModelProperty(value = "The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing")
  public RewardSetResource getRewardSet() {
    return rewardSet;
  }
  public void setRewardSet(RewardSetResource rewardSet) {
    this.rewardSet = rewardSet;
  }

  /**
   * The repeat schedule for the challenge
   **/
  @ApiModelProperty(value = "The repeat schedule for the challenge")
  public Schedule getSchedule() {
    return schedule;
  }
  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }

  /**
   * The user friendly name of that resource. Defaults to blank string
   **/
  @ApiModelProperty(value = "The user friendly name of that resource. Defaults to blank string")
  public String getShortDescription() {
    return shortDescription;
  }
  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }

  /**
   * The start date of this challenge in seconds since epoch. required if part of a campaign
   **/
  @ApiModelProperty(value = "The start date of this challenge in seconds since epoch. required if part of a campaign")
  public Long getStartDate() {
    return startDate;
  }
  public void setStartDate(Long startDate) {
    this.startDate = startDate;
  }

  /**
   * A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done
   **/
  @ApiModelProperty(value = "A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done")
  public String getTemplate() {
    return template;
  }
  public void setTemplate(String template) {
    this.template = template;
  }

  /**
   * The date/time this resource was last updated in seconds since unix epoch
   **/
  @ApiModelProperty(value = "The date/time this resource was last updated in seconds since unix epoch")
  public Long getUpdatedDate() {
    return updatedDate;
  }
  public void setUpdatedDate(Long updatedDate) {
    this.updatedDate = updatedDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeResource challengeResource = (ChallengeResource) o;
    return (this.activities == null ? challengeResource.activities == null : this.activities.equals(challengeResource.activities)) &&
        (this.additionalProperties == null ? challengeResource.additionalProperties == null : this.additionalProperties.equals(challengeResource.additionalProperties)) &&
        (this.campaignId == null ? challengeResource.campaignId == null : this.campaignId.equals(challengeResource.campaignId)) &&
        (this.copyOf == null ? challengeResource.copyOf == null : this.copyOf.equals(challengeResource.copyOf)) &&
        (this.createdDate == null ? challengeResource.createdDate == null : this.createdDate.equals(challengeResource.createdDate)) &&
        (this.endDate == null ? challengeResource.endDate == null : this.endDate.equals(challengeResource.endDate)) &&
        (this.id == null ? challengeResource.id == null : this.id.equals(challengeResource.id)) &&
        (this.leaderboardStrategy == null ? challengeResource.leaderboardStrategy == null : this.leaderboardStrategy.equals(challengeResource.leaderboardStrategy)) &&
        (this.longDescription == null ? challengeResource.longDescription == null : this.longDescription.equals(challengeResource.longDescription)) &&
        (this.name == null ? challengeResource.name == null : this.name.equals(challengeResource.name)) &&
        (this.nextEventDate == null ? challengeResource.nextEventDate == null : this.nextEventDate.equals(challengeResource.nextEventDate)) &&
        (this.rewardLagMinutes == null ? challengeResource.rewardLagMinutes == null : this.rewardLagMinutes.equals(challengeResource.rewardLagMinutes)) &&
        (this.rewardSet == null ? challengeResource.rewardSet == null : this.rewardSet.equals(challengeResource.rewardSet)) &&
        (this.schedule == null ? challengeResource.schedule == null : this.schedule.equals(challengeResource.schedule)) &&
        (this.shortDescription == null ? challengeResource.shortDescription == null : this.shortDescription.equals(challengeResource.shortDescription)) &&
        (this.startDate == null ? challengeResource.startDate == null : this.startDate.equals(challengeResource.startDate)) &&
        (this.template == null ? challengeResource.template == null : this.template.equals(challengeResource.template)) &&
        (this.updatedDate == null ? challengeResource.updatedDate == null : this.updatedDate.equals(challengeResource.updatedDate));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.activities == null ? 0: this.activities.hashCode());
    result = 31 * result + (this.additionalProperties == null ? 0: this.additionalProperties.hashCode());
    result = 31 * result + (this.campaignId == null ? 0: this.campaignId.hashCode());
    result = 31 * result + (this.copyOf == null ? 0: this.copyOf.hashCode());
    result = 31 * result + (this.createdDate == null ? 0: this.createdDate.hashCode());
    result = 31 * result + (this.endDate == null ? 0: this.endDate.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.leaderboardStrategy == null ? 0: this.leaderboardStrategy.hashCode());
    result = 31 * result + (this.longDescription == null ? 0: this.longDescription.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.nextEventDate == null ? 0: this.nextEventDate.hashCode());
    result = 31 * result + (this.rewardLagMinutes == null ? 0: this.rewardLagMinutes.hashCode());
    result = 31 * result + (this.rewardSet == null ? 0: this.rewardSet.hashCode());
    result = 31 * result + (this.schedule == null ? 0: this.schedule.hashCode());
    result = 31 * result + (this.shortDescription == null ? 0: this.shortDescription.hashCode());
    result = 31 * result + (this.startDate == null ? 0: this.startDate.hashCode());
    result = 31 * result + (this.template == null ? 0: this.template.hashCode());
    result = 31 * result + (this.updatedDate == null ? 0: this.updatedDate.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeResource {\n");
    
    sb.append("  activities: ").append(activities).append("\n");
    sb.append("  additionalProperties: ").append(additionalProperties).append("\n");
    sb.append("  campaignId: ").append(campaignId).append("\n");
    sb.append("  copyOf: ").append(copyOf).append("\n");
    sb.append("  createdDate: ").append(createdDate).append("\n");
    sb.append("  endDate: ").append(endDate).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  leaderboardStrategy: ").append(leaderboardStrategy).append("\n");
    sb.append("  longDescription: ").append(longDescription).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  nextEventDate: ").append(nextEventDate).append("\n");
    sb.append("  rewardLagMinutes: ").append(rewardLagMinutes).append("\n");
    sb.append("  rewardSet: ").append(rewardSet).append("\n");
    sb.append("  schedule: ").append(schedule).append("\n");
    sb.append("  shortDescription: ").append(shortDescription).append("\n");
    sb.append("  startDate: ").append(startDate).append("\n");
    sb.append("  template: ").append(template).append("\n");
    sb.append("  updatedDate: ").append(updatedDate).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
