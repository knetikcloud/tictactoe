/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.api;

import com.knetikcloud.client.ApiInvoker;
import com.knetikcloud.client.ApiException;
import com.knetikcloud.client.Pair;

import com.knetikcloud.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.knetikcloud.model.CountryTaxResource;
import com.knetikcloud.model.PageResourceCountryTaxResource;
import com.knetikcloud.model.PageResourceStateTaxResource;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.StateTaxResource;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class TaxesApi {
  String basePath = "https://sandbox.knetikcloud.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a country tax
  * 
   * @param taxResource The tax object
   * @return CountryTaxResource
  */
  public CountryTaxResource createCountryTax (CountryTaxResource taxResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = taxResource;

    // create path and map variables
    String path = "/tax/countries";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CountryTaxResource) ApiInvoker.deserialize(localVarResponse, "", CountryTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Create a country tax
   * 
   * @param taxResource The tax object
  */
  public void createCountryTax (CountryTaxResource taxResource, final Response.Listener<CountryTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = taxResource;

  

    // create path and map variables
    String path = "/tax/countries".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CountryTaxResource) ApiInvoker.deserialize(localVarResponse,  "", CountryTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a state tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @param taxResource The tax object
   * @return StateTaxResource
  */
  public StateTaxResource createStateTax (String countryCodeIso3, StateTaxResource taxResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = taxResource;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling createStateTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling createStateTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StateTaxResource) ApiInvoker.deserialize(localVarResponse, "", StateTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Create a state tax
   * 
   * @param countryCodeIso3 The iso3 code of the country   * @param taxResource The tax object
  */
  public void createStateTax (String countryCodeIso3, StateTaxResource taxResource, final Response.Listener<StateTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = taxResource;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling createStateTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling createStateTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StateTaxResource) ApiInvoker.deserialize(localVarResponse,  "", StateTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @return void
  */
  public void deleteCountryTax (String countryCodeIso3) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling deleteCountryTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling deleteCountryTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete an existing tax
   * 
   * @param countryCodeIso3 The iso3 code of the country
  */
  public void deleteCountryTax (String countryCodeIso3, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling deleteCountryTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling deleteCountryTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete an existing state tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @param stateCode The code of the state
   * @return void
  */
  public void deleteStateTax (String countryCodeIso3, String stateCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling deleteStateTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling deleteStateTax"));
    }
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling deleteStateTax",
        new ApiException(400, "Missing the required parameter 'stateCode' when calling deleteStateTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Delete an existing state tax
   * 
   * @param countryCodeIso3 The iso3 code of the country   * @param stateCode The code of the state
  */
  public void deleteStateTax (String countryCodeIso3, String stateCode, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling deleteStateTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling deleteStateTax"));
    }
    
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling deleteStateTax",
         new ApiException(400, "Missing the required parameter 'stateCode' when calling deleteStateTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a single tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @return CountryTaxResource
  */
  public CountryTaxResource getCountryTax (String countryCodeIso3) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getCountryTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getCountryTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CountryTaxResource) ApiInvoker.deserialize(localVarResponse, "", CountryTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Get a single tax
   * 
   * @param countryCodeIso3 The iso3 code of the country
  */
  public void getCountryTax (String countryCodeIso3, final Response.Listener<CountryTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getCountryTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getCountryTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CountryTaxResource) ApiInvoker.deserialize(localVarResponse,  "", CountryTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List and search taxes
  * Get a list of taxes
   * @param size The number of objects returned per page
   * @param page The number of the page returned
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
   * @return PageResourceCountryTaxResource
  */
  public PageResourceCountryTaxResource getCountryTaxes (Integer size, Integer page, String order) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/tax/countries";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceCountryTaxResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceCountryTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * List and search taxes
   * Get a list of taxes
   * @param size The number of objects returned per page   * @param page The number of the page returned   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
  */
  public void getCountryTaxes (Integer size, Integer page, String order, final Response.Listener<PageResourceCountryTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/tax/countries".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceCountryTaxResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceCountryTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a single state tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @param stateCode The code of the state
   * @return StateTaxResource
  */
  public StateTaxResource getStateTax (String countryCodeIso3, String stateCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getStateTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getStateTax"));
    }
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling getStateTax",
        new ApiException(400, "Missing the required parameter 'stateCode' when calling getStateTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StateTaxResource) ApiInvoker.deserialize(localVarResponse, "", StateTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Get a single state tax
   * 
   * @param countryCodeIso3 The iso3 code of the country   * @param stateCode The code of the state
  */
  public void getStateTax (String countryCodeIso3, String stateCode, final Response.Listener<StateTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getStateTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getStateTax"));
    }
    
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling getStateTax",
         new ApiException(400, "Missing the required parameter 'stateCode' when calling getStateTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StateTaxResource) ApiInvoker.deserialize(localVarResponse,  "", StateTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List and search taxes across all countries
  * Get a list of taxes
   * @param size The number of objects returned per page
   * @param page The number of the page returned
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
   * @return PageResourceStateTaxResource
  */
  public PageResourceStateTaxResource getStateTaxesForCountries (Integer size, Integer page, String order) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/tax/states";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceStateTaxResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceStateTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * List and search taxes across all countries
   * Get a list of taxes
   * @param size The number of objects returned per page   * @param page The number of the page returned   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
  */
  public void getStateTaxesForCountries (Integer size, Integer page, String order, final Response.Listener<PageResourceStateTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/tax/states".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceStateTaxResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceStateTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List and search taxes within a country
  * Get a list of taxes
   * @param countryCodeIso3 The iso3 code of the country
   * @param size The number of objects returned per page
   * @param page The number of the page returned
   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
   * @return PageResourceStateTaxResource
  */
  public PageResourceStateTaxResource getStateTaxesForCountry (String countryCodeIso3, Integer size, Integer page, String order) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getStateTaxesForCountry",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getStateTaxesForCountry"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceStateTaxResource) ApiInvoker.deserialize(localVarResponse, "", PageResourceStateTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * List and search taxes within a country
   * Get a list of taxes
   * @param countryCodeIso3 The iso3 code of the country   * @param size The number of objects returned per page   * @param page The number of the page returned   * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC]
  */
  public void getStateTaxesForCountry (String countryCodeIso3, Integer size, Integer page, String order, final Response.Listener<PageResourceStateTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling getStateTaxesForCountry",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling getStateTaxesForCountry"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceStateTaxResource) ApiInvoker.deserialize(localVarResponse,  "", PageResourceStateTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create or update a tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @param taxResource The tax object
   * @return CountryTaxResource
  */
  public CountryTaxResource updateCountryTax (String countryCodeIso3, CountryTaxResource taxResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = taxResource;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling updateCountryTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling updateCountryTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CountryTaxResource) ApiInvoker.deserialize(localVarResponse, "", CountryTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Create or update a tax
   * 
   * @param countryCodeIso3 The iso3 code of the country   * @param taxResource The tax object
  */
  public void updateCountryTax (String countryCodeIso3, CountryTaxResource taxResource, final Response.Listener<CountryTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = taxResource;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling updateCountryTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling updateCountryTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CountryTaxResource) ApiInvoker.deserialize(localVarResponse,  "", CountryTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create or update a state tax
  * 
   * @param countryCodeIso3 The iso3 code of the country
   * @param stateCode The code of the state
   * @param taxResource The tax object
   * @return StateTaxResource
  */
  public StateTaxResource updateStateTax (String countryCodeIso3, String stateCode, StateTaxResource taxResource) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = taxResource;
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling updateStateTax",
        new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling updateStateTax"));
    }
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling updateStateTax",
        new ApiException(400, "Missing the required parameter 'stateCode' when calling updateStateTax"));
    }

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (StateTaxResource) ApiInvoker.deserialize(localVarResponse, "", StateTaxResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Create or update a state tax
   * 
   * @param countryCodeIso3 The iso3 code of the country   * @param stateCode The code of the state   * @param taxResource The tax object
  */
  public void updateStateTax (String countryCodeIso3, String stateCode, StateTaxResource taxResource, final Response.Listener<StateTaxResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = taxResource;

  
    // verify the required parameter 'countryCodeIso3' is set
    if (countryCodeIso3 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryCodeIso3' when calling updateStateTax",
         new ApiException(400, "Missing the required parameter 'countryCodeIso3' when calling updateStateTax"));
    }
    
    // verify the required parameter 'stateCode' is set
    if (stateCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'stateCode' when calling updateStateTax",
         new ApiException(400, "Missing the required parameter 'stateCode' when calling updateStateTax"));
    }
    

    // create path and map variables
    String path = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_code_iso3" + "\\}", apiInvoker.escapeString(countryCodeIso3.toString())).replaceAll("\\{" + "state_code" + "\\}", apiInvoker.escapeString(stateCode.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StateTaxResource) ApiInvoker.deserialize(localVarResponse,  "", StateTaxResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
