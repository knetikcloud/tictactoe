/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.api;

import com.knetikcloud.client.ApiInvoker;
import com.knetikcloud.client.ApiException;
import com.knetikcloud.client.Pair;

import com.knetikcloud.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.knetikcloud.model.PageResourceUsageInfo;
import com.knetikcloud.model.Result;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReportingUsageApi {
  String basePath = "https://sandbox.knetikcloud.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Returns aggregated endpoint usage information by day
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
   * @param method Filter for a certain endpoint method.  Must include url as well to work
   * @param url Filter for a certain endpoint.  Must include method as well to work
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceUsageInfo
  */
  public PageResourceUsageInfo getUsageByDay (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByDay",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByDay"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByDay",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByDay"));
    }

    // create path and map variables
    String path = "/reporting/usage/day";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse, "", PageResourceUsageInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns aggregated endpoint usage information by day
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object   * @param method Filter for a certain endpoint method.  Must include url as well to work   * @param url Filter for a certain endpoint.  Must include method as well to work   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUsageByDay (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page, final Response.Listener<PageResourceUsageInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByDay",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByDay"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByDay",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByDay"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/day".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse,  "", PageResourceUsageInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns aggregated endpoint usage information by hour
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
   * @param method Filter for a certain endpoint method.  Must include url as well to work
   * @param url Filter for a certain endpoint.  Must include method as well to work
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceUsageInfo
  */
  public PageResourceUsageInfo getUsageByHour (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByHour",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByHour"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByHour",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByHour"));
    }

    // create path and map variables
    String path = "/reporting/usage/hour";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse, "", PageResourceUsageInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns aggregated endpoint usage information by hour
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object   * @param method Filter for a certain endpoint method.  Must include url as well to work   * @param url Filter for a certain endpoint.  Must include method as well to work   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUsageByHour (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page, final Response.Listener<PageResourceUsageInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByHour",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByHour"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByHour",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByHour"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/hour".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse,  "", PageResourceUsageInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns aggregated endpoint usage information by minute
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
   * @param method Filter for a certain endpoint method.  Must include url as well to work
   * @param url Filter for a certain endpoint.  Must include method as well to work
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceUsageInfo
  */
  public PageResourceUsageInfo getUsageByMinute (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByMinute",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByMinute"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByMinute",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByMinute"));
    }

    // create path and map variables
    String path = "/reporting/usage/minute";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse, "", PageResourceUsageInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns aggregated endpoint usage information by minute
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object   * @param method Filter for a certain endpoint method.  Must include url as well to work   * @param url Filter for a certain endpoint.  Must include method as well to work   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUsageByMinute (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page, final Response.Listener<PageResourceUsageInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByMinute",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByMinute"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByMinute",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByMinute"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/minute".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse,  "", PageResourceUsageInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns aggregated endpoint usage information by month
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object
   * @param method Filter for a certain endpoint method.  Must include url as well to work
   * @param url Filter for a certain endpoint.  Must include method as well to work
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceUsageInfo
  */
  public PageResourceUsageInfo getUsageByMonth (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByMonth",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByMonth"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByMonth",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByMonth"));
    }

    // create path and map variables
    String path = "/reporting/usage/month";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse, "", PageResourceUsageInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns aggregated endpoint usage information by month
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds   * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object   * @param method Filter for a certain endpoint method.  Must include url as well to work   * @param url Filter for a certain endpoint.  Must include method as well to work   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUsageByMonth (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page, final Response.Listener<PageResourceUsageInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByMonth",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByMonth"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByMonth",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByMonth"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/month".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse,  "", PageResourceUsageInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns aggregated endpoint usage information by year
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @param combineEndpoints Whether to combine counts from different endpoints. Removes the url and method from the result object
   * @param method Filter for a certain endpoint method.  Must include url as well to work
   * @param url Filter for a certain endpoint.  Must include method as well to work
   * @param size The number of objects returned per page
   * @param page The number of the page returned, starting with 1
   * @return PageResourceUsageInfo
  */
  public PageResourceUsageInfo getUsageByYear (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByYear",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByYear"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByYear",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByYear"));
    }

    // create path and map variables
    String path = "/reporting/usage/year";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse, "", PageResourceUsageInfo.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns aggregated endpoint usage information by year
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds   * @param combineEndpoints Whether to combine counts from different endpoints. Removes the url and method from the result object   * @param method Filter for a certain endpoint method.  Must include url as well to work   * @param url Filter for a certain endpoint.  Must include method as well to work   * @param size The number of objects returned per page   * @param page The number of the page returned, starting with 1
  */
  public void getUsageByYear (Long startDate, Long endDate, Boolean combineEndpoints, String method, String url, Integer size, Integer page, final Response.Listener<PageResourceUsageInfo> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageByYear",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageByYear"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageByYear",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageByYear"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/year".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "combine_endpoints", combineEndpoints));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "method", method));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PageResourceUsageInfo) ApiInvoker.deserialize(localVarResponse,  "", PageResourceUsageInfo.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns list of endpoints called (method and url)
  * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds
   * @param endDate The ending of the range being requested, unix timestamp in seconds
   * @return List<String>
  */
  public List<String> getUsageEndpoints (Long startDate, Long endDate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageEndpoints",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageEndpoints"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageEndpoints",
        new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageEndpoints"));
    }

    // create path and map variables
    String path = "/reporting/usage/endpoints";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<String>) ApiInvoker.deserialize(localVarResponse, "array", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Returns list of endpoints called (method and url)
   * 
   * @param startDate The beginning of the range being requested, unix timestamp in seconds   * @param endDate The ending of the range being requested, unix timestamp in seconds
  */
  public void getUsageEndpoints (Long startDate, Long endDate, final Response.Listener<List<String>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getUsageEndpoints",
         new ApiException(400, "Missing the required parameter 'startDate' when calling getUsageEndpoints"));
    }
    
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling getUsageEndpoints",
         new ApiException(400, "Missing the required parameter 'endDate' when calling getUsageEndpoints"));
    }
    

    // create path and map variables
    String path = "/reporting/usage/endpoints".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<String>) ApiInvoker.deserialize(localVarResponse,  "array", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
