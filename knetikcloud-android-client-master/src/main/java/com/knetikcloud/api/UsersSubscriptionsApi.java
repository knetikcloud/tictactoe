/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.knetikcloud.api;

import com.knetikcloud.client.ApiInvoker;
import com.knetikcloud.client.ApiException;
import com.knetikcloud.client.Pair;

import com.knetikcloud.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.knetikcloud.model.InventorySubscriptionResource;
import com.knetikcloud.model.InvoiceResource;
import com.knetikcloud.model.ReactivateSubscriptionRequest;
import com.knetikcloud.model.Result;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UsersSubscriptionsApi {
  String basePath = "https://sandbox.knetikcloud.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get details about a user&#39;s subscription
  * 
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @return InventorySubscriptionResource
  */
  public InventorySubscriptionResource getUserSubscriptionDetails (Integer userId, Integer inventoryId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUserSubscriptionDetails",
        new ApiException(400, "Missing the required parameter 'userId' when calling getUserSubscriptionDetails"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling getUserSubscriptionDetails",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling getUserSubscriptionDetails"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InventorySubscriptionResource) ApiInvoker.deserialize(localVarResponse, "", InventorySubscriptionResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Get details about a user&#39;s subscription
   * 
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory
  */
  public void getUserSubscriptionDetails (Integer userId, Integer inventoryId, final Response.Listener<InventorySubscriptionResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUserSubscriptionDetails",
         new ApiException(400, "Missing the required parameter 'userId' when calling getUserSubscriptionDetails"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling getUserSubscriptionDetails",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling getUserSubscriptionDetails"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InventorySubscriptionResource) ApiInvoker.deserialize(localVarResponse,  "", InventorySubscriptionResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get details about a user&#39;s subscriptions
  * 
   * @param userId The id of the user
   * @return List<InventorySubscriptionResource>
  */
  public List<InventorySubscriptionResource> getUsersSubscriptionDetails (Integer userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUsersSubscriptionDetails",
        new ApiException(400, "Missing the required parameter 'userId' when calling getUsersSubscriptionDetails"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<InventorySubscriptionResource>) ApiInvoker.deserialize(localVarResponse, "array", InventorySubscriptionResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Get details about a user&#39;s subscriptions
   * 
   * @param userId The id of the user
  */
  public void getUsersSubscriptionDetails (Integer userId, final Response.Listener<List<InventorySubscriptionResource>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling getUsersSubscriptionDetails",
         new ApiException(400, "Missing the required parameter 'userId' when calling getUsersSubscriptionDetails"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InventorySubscriptionResource>) ApiInvoker.deserialize(localVarResponse,  "array", InventorySubscriptionResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reactivate a subscription and charge fee
  * 
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @param reactivateSubscriptionRequest The reactivate subscription request object inventory
   * @return InvoiceResource
  */
  public InvoiceResource reactivateUserSubscription (Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = reactivateSubscriptionRequest;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling reactivateUserSubscription",
        new ApiException(400, "Missing the required parameter 'userId' when calling reactivateUserSubscription"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling reactivateUserSubscription",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling reactivateUserSubscription"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/reactivate".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InvoiceResource) ApiInvoker.deserialize(localVarResponse, "", InvoiceResource.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Reactivate a subscription and charge fee
   * 
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory   * @param reactivateSubscriptionRequest The reactivate subscription request object inventory
  */
  public void reactivateUserSubscription (Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest, final Response.Listener<InvoiceResource> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = reactivateSubscriptionRequest;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling reactivateUserSubscription",
         new ApiException(400, "Missing the required parameter 'userId' when calling reactivateUserSubscription"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling reactivateUserSubscription",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling reactivateUserSubscription"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/reactivate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InvoiceResource) ApiInvoker.deserialize(localVarResponse,  "", InvoiceResource.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set a new date to bill a subscription on
  * 
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @param billDate The new bill date. Unix timestamp in seconds
   * @return void
  */
  public void setSubscriptionBillDate (Integer userId, Integer inventoryId, Long billDate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = billDate;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionBillDate",
        new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionBillDate"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionBillDate",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionBillDate"));
    }
    // verify the required parameter 'billDate' is set
    if (billDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'billDate' when calling setSubscriptionBillDate",
        new ApiException(400, "Missing the required parameter 'billDate' when calling setSubscriptionBillDate"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/bill-date".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Set a new date to bill a subscription on
   * 
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory   * @param billDate The new bill date. Unix timestamp in seconds
  */
  public void setSubscriptionBillDate (Integer userId, Integer inventoryId, Long billDate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = billDate;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionBillDate",
         new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionBillDate"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionBillDate",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionBillDate"));
    }
    
    // verify the required parameter 'billDate' is set
    if (billDate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'billDate' when calling setSubscriptionBillDate",
         new ApiException(400, "Missing the required parameter 'billDate' when calling setSubscriptionBillDate"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/bill-date".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set the payment method to use for a subscription
  * May send null to use floating default
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @param paymentMethodId The id of the payment method
   * @return void
  */
  public void setSubscriptionPaymentMethod (Integer userId, Integer inventoryId, Integer paymentMethodId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = paymentMethodId;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionPaymentMethod",
        new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionPaymentMethod"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionPaymentMethod",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionPaymentMethod"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/payment-method".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Set the payment method to use for a subscription
   * May send null to use floating default
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory   * @param paymentMethodId The id of the payment method
  */
  public void setSubscriptionPaymentMethod (Integer userId, Integer inventoryId, Integer paymentMethodId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = paymentMethodId;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionPaymentMethod",
         new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionPaymentMethod"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionPaymentMethod",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionPaymentMethod"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/payment-method".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set the status of a subscription
  * The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @param status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;)
   * @return void
  */
  public void setSubscriptionStatus (Integer userId, Integer inventoryId, String status) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = status;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionStatus",
        new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionStatus"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionStatus",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionStatus"));
    }
    // verify the required parameter 'status' is set
    if (status == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'status' when calling setSubscriptionStatus",
        new ApiException(400, "Missing the required parameter 'status' when calling setSubscriptionStatus"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/status".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Set the status of a subscription
   * The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory   * @param status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;)
  */
  public void setSubscriptionStatus (Integer userId, Integer inventoryId, String status, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = status;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setSubscriptionStatus",
         new ApiException(400, "Missing the required parameter 'userId' when calling setSubscriptionStatus"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setSubscriptionStatus",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling setSubscriptionStatus"));
    }
    
    // verify the required parameter 'status' is set
    if (status == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'status' when calling setSubscriptionStatus",
         new ApiException(400, "Missing the required parameter 'status' when calling setSubscriptionStatus"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set a new subscription plan for a user
  * 
   * @param userId The id of the user
   * @param inventoryId The id of the user&#39;s inventory
   * @param planId The id of the new plan. Must be from the same subscription
   * @return void
  */
  public void setUserSubscriptionPlan (Integer userId, Integer inventoryId, String planId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = planId;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setUserSubscriptionPlan",
        new ApiException(400, "Missing the required parameter 'userId' when calling setUserSubscriptionPlan"));
    }
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setUserSubscriptionPlan",
        new ApiException(400, "Missing the required parameter 'inventoryId' when calling setUserSubscriptionPlan"));
    }

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/plan".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth2" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
       if (ex.getCause() instanceof VolleyError) {
         VolleyError volleyError = (VolleyError)ex.getCause();
         if (volleyError.networkResponse != null) {
           throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
         }
       }
       throw ex;
    } catch (TimeoutException ex) {
       throw ex;
    }
  }

      /**
   * Set a new subscription plan for a user
   * 
   * @param userId The id of the user   * @param inventoryId The id of the user&#39;s inventory   * @param planId The id of the new plan. Must be from the same subscription
  */
  public void setUserSubscriptionPlan (Integer userId, Integer inventoryId, String planId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = planId;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling setUserSubscriptionPlan",
         new ApiException(400, "Missing the required parameter 'userId' when calling setUserSubscriptionPlan"));
    }
    
    // verify the required parameter 'inventoryId' is set
    if (inventoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'inventoryId' when calling setUserSubscriptionPlan",
         new ApiException(400, "Missing the required parameter 'inventoryId' when calling setUserSubscriptionPlan"));
    }
    

    // create path and map variables
    String path = "/users/{user_id}/subscriptions/{inventory_id}/plan".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "inventory_id" + "\\}", apiInvoker.escapeString(inventoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] { "OAuth2" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
